#!/usr/bin/env bash
#
# Immersion Pod - Passive listening management tool
# Copyright (C) 2021 Ren Tatsumoto. <tatsu at autistici.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Any modifications to this file must keep this entire header intact.

readonly program='immersionpod'
readonly version=v0.1
readonly current='current'
readonly archive='archive'
readonly config_filepath=${XDG_CONFIG_HOME:-$HOME/.config}/$program/config
readonly tmp_dir="/tmp/$program"

load_default_config() {
	langs=jpn,eng,rus,ukr
	prefer_internal_subs=yes
	video_dir=~/Videos/ongoing
	bitrate=32k
	recent_threshold=10
	padding=0.2
}

ensure_dirs() {
	mkdir -p "$(dirname -- "${config_filepath:?}")"
	mkdir -p "$immersionpod_dir"/{$current,$archive}
	mkdir -p "$tmp_dir"
}

probe_tracks() {
	if [[ ${1-} =~ ^(a|s)$ ]]; then
		local -r track_type=$1
	else
		echo "Invalid track type. Please specify 'a' or 's'."
		return 1
	fi
	if [[ -f ${2-} ]]; then
		local -r video_fp=$2
	else
		echo "'${2-}' is not a file."
		return 1
	fi

	ffprobe \
		-loglevel error \
		-select_streams "$track_type" \
		-show_entries stream=index:stream_tags=language,title \
		-print_format csv=print_section=0 \
		"$video_fp"
}

probe() {
	if [[ ${1-} =~ ^(a|s)$ ]]; then
		probe_tracks "$@"
		return
	fi
	local -r video_fp=${1:?Video filepath is not set.}

	echo "Audio tracks:"
	probe_tracks a "$video_fp"
	echo
	echo "Subtitle tracks:"
	probe_tracks s "$video_fp"
}

best_track() {
	local -r track_type=${1:?}
	local -r video=${2:?}
	local -r tracks=$(probe_tracks "$track_type" "$video")

	while IFS= read -r lang; do
		while IFS= read -r track; do
			track_num=$(cut -d, -f1 <<<"$track")
			track_lang=$(cut -d, -f2 <<<"$track")
			if [[ $lang == "$track_lang" ]]; then
				echo "$track_num"
				return
			fi
		done <<<"$tracks"
	done <<<"${langs//,/$'\n'}"
	unset lang track
}

find_recent_videos() {
	local -r sep=$([[ -n ${1-} ]] && echo 0)
	# Search files that have been modified in the last N days
	find "$video_dir" \
		-type f \( -name '*.mkv' -o -name '*.mp4' \) \
		-mtime "-$recent_threshold" "-print$sep" || exit 2
}

find_outdated_audio() {
	find "$immersionpod_dir/$current" -maxdepth 1 -type f -mtime "+$recent_threshold" -print0 || exit 2
}

fetch_video_title() {
	local -r input=${1:?Path to video file is not set.}
	strip() {
		sed -e 's/_/ /g' \
			-e 's/fansub\|vostfr\|10bits\|BluRay\|x26[45]\|AAC\|flac//gi' \
			-Ee 's/[0-9]{3,4}[pP]//g' \
			-Ee 's/(\[|\()[^])]*(\]|\))//g' \
			-e 's/^ *//; s/ *$//' \
			-Ee 's/ +/ /g'
	}
	print_name() {
		basename -- "${input%.*}"
	}
	print_name | strip
}

extract_subtitles() {
	local -r input=${1:?}
	local -r output=${2:?}
	local -r track_num=$(best_track s "$input")

	echo "Extracting track #$track_num (subtitles) from $(basename -- "$input")..."
	ffmpeg -nostdin \
		-loglevel error \
		-hide_banner \
		-n \
		-vn \
		-an \
		-i "$input" \
		-map_metadata -1 \
		-map "0:${track_num:-s}" \
		-f "${output##*.}" \
		"$output" &&
		echo "$output has been written."
}

extract_audio() {
	local -r input=${1:?}
	local -r output=${2:-$immersionpod_dir/$current/$(basename -- "${input%.*}").ogg}
	local -r title=$(fetch_video_title "$input")
	local -r track_num=$(best_track a "$input")

	if [[ $output != *.ogg ]]; then
		echo "Error: filename should end with '.ogg'" >&2
		return 1
	fi

	if [[ ! -r "$input" ]]; then
		echo "Error: Can't read file $input." >&2
		return 1
	fi

	if [[ ! -w "$(dirname -- "$output")" ]]; then
		echo "Error: Can't write file $output." >&2
		return 1
	fi

	if [[ -f "$output" ]] && [[ -z $global_overwrite ]]; then
		echo "Warning: $(basename -- "$output") already exists. Doing nothing." >&2
		return 1
	fi

	echo "Extracting track #$track_num (audio) from $(basename -- "$input")..."
	ffmpeg -nostdin \
		-loglevel error \
		-hide_banner \
		"-${global_overwrite:-n}" \
		-vn \
		-sn \
		-i "$input" \
		-map_metadata -1 \
		-map "0:${track_num:-a}" \
		-ac 2 \
		-ab "$bitrate" \
		-vbr on \
		-compression_level 10 \
		-application voip \
		-acodec libopus \
		-metadata title="$title" \
		"$output" &&
		echo "$output has been written."
}

make_chunk() {
	local -r input=${1:?}
	local -r output=${2:?}
	local -r start=${3:?}
	local -r end=${4:?}

	echo "$start,$end"

	ffmpeg -nostdin \
		-loglevel error \
		-hide_banner \
		-n \
		-vn \
		-sn \
		-i "$input" \
		-map_metadata -1 \
		-codec:a copy \
		-ss "$start" \
		-to "$end" \
		"$output"
}

find_external_subtitles() {
	local -r video=${1:?}
	local -r dir=$(dirname -- "$video")
	local -r base=$(basename -- "${video%.*}")
	find "$dir" -maxdepth 5 -type f \( -name "$base*.srt" -o -name "$base*.ass" \) | head -1
}

to_srt() {
	local -r input=${1:?Input file is not specified.}
	local -r output=${2:?Output file is not specified.}

	ffmpeg -nostdin \
		-loglevel error \
		-hide_banner \
		-y \
		-vn \
		-an \
		-i "$input" \
		-f srt \
		"$output"
}

get_speech_fragments() {
	awk -F' --> ' -vPADDING=$padding '
	function time_parts_to_seconds(hours, mins, secs) {
		return hours * 3600.0 + mins * 60.0 + secs
	}
	function str_time_to_seconds(time,    chunks) {
		split(time, chunks, ":")
		gsub(",", ".", chunks[3])
		return time_parts_to_seconds(chunks[1], chunks[2], chunks[3])
	}
	function overlap(t1s, t1e, t2s, t2e) {
		return (min(t1e, t2e) - max(t1s, t2s)) / (t1e - t1s)
	}
	function min(var1, var2) {
		if (var1 < var2) {
			return var1
		} else {
			return var2
		}
	}
	function max(var1, var2) {
		if (var1 > var2) {
			return var1
		} else {
			return var2
		}
	}
	function apply_padding(timings) {
		timings["start"] -= PADDING
		timings["end"]   += PADDING
		if (timings["start"] < 0) {
			timings["start"] = 0
		}
	}
	BEGIN {
		prev["start"] = 0
		prev["end"] = 0
	}
	/^[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3} --> [0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}$/ {
		cur["start"] = str_time_to_seconds($1)
		cur["end"]   = str_time_to_seconds($2)

		if (cur["start"] == cur["end"] || (cur["end"] - cur["start"]) > 30) {
			next
		}

		apply_padding(cur)

		if (prev["start"] == 0 && prev["end"] == 0) {
			prev["start"] = cur["start"]
			prev["end"]   = cur["end"]
		} else {
			if (overlap(prev["start"], prev["end"], cur["start"], cur["end"]) > 0) {
				prev["start"] = min(prev["start"], cur["start"])
				prev["end"] = max(prev["end"], cur["end"])
			} else {
				print prev["start"]","prev["end"]
				prev["start"] = cur["start"]
				prev["end"] = cur["end"]
			}
		}
	}
	END {
		# last timing is not padded for safety reasons
		print prev["start"]","prev["end"] - PADDING
	}' "${1:?}"
}

fetch_video_subtitles() {
	local -r video=${1:?}
	local -r subs_ext=${2:-}
	local -r subs_out=${3:?}

	if [[ $prefer_internal_subs == 'yes' ]]; then
		if [[ -f "$subs_out" ]] || extract_subtitles "$video" "$subs_out"; then
			echo "Extracted internal subtitles."
		else
			echo "Failed to extract internal subtitles."
			if [[ -f $subs_ext ]]; then
				echo "External subtitle file '$(basename -- "$subs_ext")' will be used."
				to_srt "$subs_ext" "$subs_out"
			else
				return 1
			fi
		fi
	else
		if [[ -f $subs_ext ]]; then
			echo "External subtitle file '$(basename -- "$subs_ext")' will be used."
			to_srt "$subs_ext" "$subs_out"
		else
			if [[ -f "$subs_out" ]] || extract_subtitles "$video" "$subs_out"; then
				echo "Extracted internal subtitles."
			else
				echo "Failed to extract internal subtitles."
				return 1
			fi
		fi
	fi
}

__make_condensed() {
	if [[ $condenced_audio != *.ogg ]]; then
		echo "Error: filename should end with '.ogg'" >&2
		return 1
	fi

	if [[ -f $condenced_audio ]] && [[ -z ${global_overwrite-} ]]; then
		echo "Warning: $(basename -- "$condenced_audio") already exists. Doing nothing." >&2
		return 1
	fi

	if [[ ! -f $audio ]] && ! extract_audio "$video" "$audio"; then
		return 1
	fi

	if ! fetch_video_subtitles "$video" "$subs_ext" "$subs_out"; then
		echo "File '$(basename -- "$audio")' will be added without condensing."
		mv "$audio" "$condenced_audio"
		return
	fi

	local start end
	while IFS=, read -r start end; do
		make_chunk "$audio" "$chunks_dir/${base}_${start}.ogg" "$start" "$end"
	done < <(get_speech_fragments "${subs_out:?}")

	find "$chunks_dir" -type f -name '*.ogg' | tac | sed "s/^/file '/g; s/$/'/g" >"$chunks_file"

	ffmpeg -nostdin \
		-hide_banner \
		-loglevel error \
		-vn \
		-sn \
		"-${global_overwrite:-n}" \
		-f concat \
		-safe 0 \
		-i "$chunks_file" \
		-c copy \
		-metadata title="$(fetch_video_title "${video:?}")" \
		"$condenced_audio"
}

make_condensed() {
	local -r video=${1:?}
	local -r base=$(basename -- "${video%.*}")

	local -r job_dir=$(mktemp -d --tmpdir="$tmp_dir" -t "$base.job-XXXX")

	local -r audio=$job_dir/$base.ogg
	local -r condenced_audio=${2:-$immersionpod_dir/$current/$base.ogg}

	local -r chunks_dir=$(mktemp -d --tmpdir="$job_dir" -t "chunks-XXXX")
	local -r chunks_file=$job_dir/chunks.list

	local -r subs_out=$job_dir/$base.srt
	local -r subs_ext=${3:-$(find_external_subtitles "$video")}

	if __make_condensed; then
		local -r result=0
	fi
	rm -rf -- "$job_dir"
	return ${result-1}
}

condense() {
	while getopts 'i:s:o:' flag; do
		case $flag in
			i) local -r input=${OPTARG} ;;
			s) local -r subtitles=${OPTARG} ;;
			o) local -r output=${OPTARG} ;;
			*) echo "Unknown argument." && exit 1 ;;
		esac
	done
	unset flag

	make_condensed "${input:?Input video file is not set.}" "${output-}" "${subtitles-}"
}

notify_send() {
	local -r msg=${*:?}
	command -v notify-send >/dev/null && notify-send "Immersion pod" "$msg"
	echo "$msg"
}

add_notify() {
	local -r video=${1:?}
	local -r msg="$(basename -- "$video") has been added."

	if [[ $video == http*youtu*be* ]]; then
		func=add_yt
	elif [[ -f $video ]] && [[ $video =~ \.(mkv|mp4)$ ]]; then
		if [[ -z ${global_no_condense-} ]]; then
			func=make_condensed
		else
			func=extract_audio
		fi
	else
		echo "Error: '$video' is not a mkv/mp4 file." >&2
		return
	fi

	if "${func:?}" "$video"; then
		notify_send "$msg"
	fi
}

add() {
	case ${1-} in
		-r | --resent | recent)
			add_recent
			return
			;;
		-s | --stdin | stdin)
			add_stdin
			return
			;;
	esac
	for arg; do
		add_notify "$arg"
	done
	unset arg
}

add_stdin() {
	if [[ -n ${1-} ]]; then
		local -r sep=$'\0'
	else
		local -r sep=$'\n'
	fi
	while IFS= read -r -d "$sep" video; do
		add_notify "$video"
	done
}

add_recent() {
	find_recent_videos -0 | add_stdin -0
}

add_yt() {
	if command -v youtube-dl >/dev/null; then
		youtube-dl \
			--ignore-errors \
			--extract-audio \
			--add-metadata \
			--continue \
			-f bestaudio/best \
			-o "$immersionpod_dir/$current/%(uploader)s%(title)s.%(ext)s" \
			"${*:?}"
	else
		echo "Error: 'youtube-dl' is not installed." >&2
	fi
}

archive() {
	local -r archive_fol="$immersionpod_dir/$archive/$(date '+%Y-%V')"

	echo "Archiving old episodes..."

	old_episodes=()
	while IFS= read -r -d $'\0' filename; do
		old_episodes+=("$filename")
	done < <(find_outdated_audio)

	# if there are old episodes, crate a dir for them and then move them
	if [[ ${#old_episodes[@]} -gt 0 ]]; then
		mkdir -pv "$archive_fol"
		mv -v "${old_episodes[@]}" "$archive_fol"
		local -r msg="Archived ${#old_episodes[@]} episodes."
	else
		local -r msg="Nothing to archive."
	fi

	notify_send "$msg"
}

rotate() {
	add_recent
	archive
	reshuffle
}

reshuffle() {
	if ! command -v mpc >/dev/null; then
		echo "Error: mpc is not installed." >&2
		return 1
	fi
	mpc update "$program/$current"
	mpc crop || true
	mpc add "$program/$current"
	mpc shuffle
	mpc play
}

get_mpd_dir() {
	# https://wiki.archlinux.org/index.php/Music_Player_Daemon#Configuration
	local -r path=~/.config/mpd/mpd.conf
	# shellcheck disable=SC2088
	{
		echo '~/music'
		sed -n '/^music_directory/ {s/^music_directory[[:space:]]*"\([^"]*\)".*$/\1/p; q}' "$path"
	} | tail -1
}

set_impd_dir() {
	local dir
	dir=$(get_mpd_dir)/$program
	dir=${dir//\/\//\/}
	dir=${dir/\~/$HOME}
	readonly immersionpod_dir=$dir
}

echo_help() {
	local -r bn=$(basename -- "$0")
	cat <<-EOF
		Usage: $bn ACTION [OPTION] FILE
		Manage immersion audio.

		ACTION Commands:
		  add [OPTION] FILE	Add files to Immersion pod.
		    Options:
		      -r, --recent	Add new files from your video directory to Immersion pod.
		      -s, --stdin	Read filenames from stdin.
		  condense [OPTION]	Condense a video.
		    Options:
		      -i		Input file.
		      -o		Output file.
		      -s		Subtitle file.
		  archive		Move episodes older than $recent_threshold days to the archive folder.
		  reshuffle		Re-add files to the playlist, shuffle them and start playing.
		  rotate		Short for add_recent, archive, reshuffle.
		  probe [a|s] FILE	Print streams in FILE.

		Options:
		  -f, --force		Overwrite existing files.
		  -n, --no-condense	Don't condense audio.

		Examples:
		  $bn add -f 'video.mkv'
		  $bn rotate
		  find /mnt/videos/ | $bn add --stdin

		To report bugs, see https://matrix.to/#/#djt:tchncs.de
	EOF
}

version() {
	cat <<-EOF
		$(basename -- "$0") $version
		Copyright (C) $(date +%Y) Ren Tatsumoto.
		License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
		This is free software: you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.
	EOF
}

main() {
	# Load default configuration, then override settings with the config file
	load_default_config
	set_impd_dir
	ensure_dirs

	# shellcheck source=/dev/null
	if [[ -f ${config_filepath:?} ]]; then
		source "$config_filepath"
	fi

	# Process global arguments
	local args=()
	for arg; do
		case $arg in
			-n | --no-condense) readonly global_no_condense='y' ;;
			-f | --force) readonly global_overwrite='y' ;;
			*) args+=("$arg") ;;
		esac
	done
	unset arg

	case ${1-} in
		'' | -h | --help) echo_help ;;
		-v | --version) version ;;
		*)
			local -r command=${args[0]}

			if declare -f "$command" >/dev/null && [[ $command != "${FUNCNAME[0]}" ]]; then
				# call arguments verbatim
				"${args[@]}"
			else
				echo "Error: '$1' is not a known function name." >&2
				echo_help
				exit 1
			fi
			;;

	esac
}

#
# MAIN
# Do not change anything here. If you want to modify the code, edit main()
#
main "$@"
