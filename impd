#!/usr/bin/env bash
#
# Immersion Pod - Passive listening management tool
# Copyright (C) 2021 Ren Tatsumoto. <tatsu at autistici.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Any modifications to this file must keep this entire header intact.

readonly program='immersionpod'
readonly version=v0.5
readonly current='current'
readonly archive='archive'
readonly config_filepath=${XDG_CONFIG_HOME:-$HOME/.config}/$program/config
readonly tmp_dir="/tmp/$program"
readonly srt_timing_pattern='^[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3} --> [0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}$'

load_default_config() {
	langs=jpn,eng,rus,ukr
	prefer_internal_subs=yes
	video_dir=~/Videos/ongoing
	music_dir=""
	bitrate=32k
	recent_threshold=10
	padding=0.2
	use_skip_pattern=yes
	skip_pattern="^♪〜$|^〜♪$|^・～$|.*{\\be1}.*"
	filename_pattern="[^(NCOP|NCED)]"
}

ensure_dirs() {
	mkdir -p -- \
		"$(dirname -- "${config_filepath:?}")" \
		"$immersionpod_dir"/{$current,$archive} \
		"$tmp_dir"
}

probe_tracks() {
	if [[ ${1-} =~ ^(a|s)$ ]]; then
		local -r track_type=$1
	else
		echo "Invalid track type. Please specify 'a' or 's'."
		return 1
	fi
	if [[ -f ${2-} ]]; then
		local -r video_fp=$2
	else
		echo "'${2-}' is not a file."
		return 1
	fi

	# Note: ffmpeg doesn't honor the order of specification of the local section entries in the output.
	# This may cause breakage when impd is used to extract audio from certain containers.
	# Because of that there's a need to "sort" the entries with awk.

	ffprobe \
		-loglevel error \
		-select_streams "$track_type" \
		-show_entries stream_tags=language,title:stream=index \
		-print_format default \
		"$video_fp" | awk -F= -vIGNORECASE=1 '
	$0 == "[STREAM]" {
		track_index = "auto"
		track_lang  = "unknown"
		track_title = "unknown"
	}
	$1 == "index" {
		track_index = $2
	}
	$1 == "TAG:title" {
		track_title = $2
	}
	$1 == "TAG:language" {
		track_lang = $2
	}
	$0 == "[/STREAM]" {
		print track_index "," track_lang "," track_title
	}'
}

probe() {
	if [[ ${1-} == a ]]; then
		local -r requested_types="a,Audio"
		shift
	elif [[ ${1-} == s ]]; then
		local -r requested_types="s,Subtitles"
		shift
	else
		local -r requested_types=$'a,Audio\ns,Subtitles'
	fi
	local -r video_fp=${1:?Video filepath is not set.}
	local type title
	while IFS=, read -r type title; do
		echo "=== $title tracks ==="
		{
			echo "Index,Language,Title"
			probe_tracks "$type" "$video_fp"
		} | column -s ',' -t
	done <<<"$requested_types"
}

best_track() {
	local -r track_type=${1:?}
	local -r video=${2:?}
	local -r tracks=$(probe_tracks "$track_type" "$video" | cut -d, -f1,2)

	local lang track_num track_lang
	while IFS= read -r lang; do
		while IFS=, read -r track_num track_lang; do
			if [[ $lang == "$track_lang" ]]; then
				echo "$track_num"
				return
			fi
		done <<<"$tracks"
	done <<<"${langs//,/$'\n'}"
}

find_recent_videos() {
	local -r sep=$([[ -n ${1-} ]] && echo 0)
	# Search files that have been modified in the last N days
	find "$video_dir" \
		-type f \( -name '*.mkv' -o -name '*.mp4' \) \
		-mtime "-$recent_threshold" "-print$sep" || exit 2
}

find_outdated_audio() {
	find "$immersionpod_dir/$current" -maxdepth 1 -type f -mtime "+$recent_threshold" -print0 || exit 2
}

fetch_title() {
	local -r input=${1:?Path to video file is not set.}
	strip() {
		sed -e 's/_/ /g' \
			-e 's/fansub\|vostfr\|10bits\|BluRay\|x26[45]\|AAC\|flac//gi' \
			-Ee 's/[0-9]{3,4}[pP]//g' \
			-Ee 's/(\[|\()[^])]*(\]|\))//g' \
			-e 's/^ *//; s/ *$//' \
			-Ee 's/ +/ /g'
	}
	print_name() {
		basename -- "${input%.*}"
	}
	print_name | strip
}

fetch_episode_number() {
	local -r file=${1:?}
	{
		echo 01
		sed \
			-Ee 's/(\[|\()[^])]*(\]|\))//g' \
			-Ee 's/[0-9]{3,4}[pP]//g' \
			-Ee 's/(19|20)[0-9]{2}//g' \
			-Ee 's/v[.0-9-]{1,4}//g' \
			-e 's/_/ /g' <<<"${file%.*}" |
			grep -Pio '(?<=[＃#. pe-])[[:digit:]]{1,3}\b'
	} | tail -1
}

extract_subtitles() {
	local -r input=${1:?}
	local -r output=${2:?}
	local -r track_num=$(best_track s "$input")

	echo "Extracting track #${track_num:-auto} (subtitles) from $(basename -- "$input")..."
	ffmpeg -nostdin \
		-loglevel error \
		-hide_banner \
		-n \
		-vn \
		-an \
		-i "$input" \
		-map_metadata -1 \
		-map "0:${track_num:-s:0}" \
		-f "${output##*.}" \
		"$output" &&
		echo "$output has been written."
}

check_output() {
	if [[ $output != *.ogg ]]; then
		echo "Error: filename should end with '.ogg'" >&2
		return 1
	fi

	if [[ -f $output ]] && [[ -z ${global_overwrite-} ]]; then
		echo "Warning: $(basename -- "$output") already exists. Doing nothing." >&2
		return 1
	fi

	if [[ ! -w $(dirname -- "$output") ]]; then
		echo "Error: Can't write file $output." >&2
		return 1
	fi
}

extract_audio() {
	local -r input=$(readlink -f "${1:?}")
	local -r output=$(readlink -f "${2:-$immersionpod_dir/$current/$(basename -- "${input%.*}").ogg}")
	local -r track_num=$(best_track a "$input")

	if ! check_output; then
		return 1
	fi

	if [[ ! -r $input ]]; then
		echo "Error: Can't read file $input." >&2
		return 1
	fi

	echo "Extracting track #${track_num:-auto} (audio) from $(basename -- "$input")..."
	ffmpeg -nostdin \
		-loglevel error \
		-hide_banner \
		"-${global_overwrite:-n}" \
		-vn \
		-sn \
		-i "$input" \
		-map_metadata -1 \
		-map "0:${track_num:-a:0}" \
		-ac 2 \
		-ab "$bitrate" \
		-vbr on \
		-compression_level 10 \
		-application voip \
		-acodec libopus \
		"$output" &&
		echo "$output has been written."
}

make_uncondensed() {
	local -r input=${1:?}
	local -r base=$(basename -- "${input%.*}")
	local -r temp_audio=$tmp_dir/$base.ogg
	local -r output=$immersionpod_dir/$current/$base.ogg

	if ! check_output; then
		return 1
	fi

	if extract_audio "$input" "$temp_audio" && add_metadata "$temp_audio" "$output"; then
		rm -f -- "$temp_audio"
	else
		return 1
	fi
}

make_chunk() {
	local -r input=${1:?}
	local -r output=${2:?}
	local -r start=${3:?}
	local -r end=${4:?}

	ffmpeg -nostdin \
		-loglevel error \
		-hide_banner \
		-n \
		-vn \
		-sn \
		-i "$input" \
		-map_metadata -1 \
		-codec:a copy \
		-ss "$start" \
		-to "$end" \
		"$output"
}

find_external_subtitles() {
	escape_square_brackets() { sed 's|\[|\\\[|g; s|\]|\\\]|g'; }
	local -r video=${1:?}
	local -r dir=$(dirname -- "$video")
	local -r base=$(basename -- "${video%.*}" | escape_square_brackets)
	find "$dir" -maxdepth 5 -type f \( -name "$base*.srt" -or -name "$base*.ass" \) | head -1
}

sub_conv() {
	local -r input=${1:?Input file is not specified.}
	local -r output=${2:?Output file is not specified.}

	if [[ $output == "$input" ]]; then
		echo "Input and output can't be the same file."
		return 1
	fi

	if [[ $output != *.ass ]] && [[ $output != *.srt ]]; then
		echo "Please specify ass or srt as the output extension."
		return 1
	fi

	ffmpeg -nostdin \
		-loglevel error \
		-hide_banner \
		-y \
		-vn \
		-an \
		-i "$input" \
		-f "${output##*.}" \
		"$output"
}

parse_speech_fragments() {
	awk -F' --> ' -vPADDING="$padding" -vSRT_TIMING_PATTERN="$srt_timing_pattern" '
	function time_parts_to_seconds(hours, mins, secs) {
		return hours * 3600.0 + mins * 60.0 + secs
	}
	function str_time_to_seconds(time,    chunks) {
		split(time, chunks, ":")
		gsub(",", ".", chunks[3])
		return time_parts_to_seconds(chunks[1], chunks[2], chunks[3])
	}
	function overlap(t1s, t1e, t2s, t2e) {
		return (min(t1e, t2e) - max(t1s, t2s)) / (t1e - t1s)
	}
	function min(var1, var2) {
		if (var1 < var2) {
			return var1
		} else {
			return var2
		}
	}
	function max(var1, var2) {
		if (var1 > var2) {
			return var1
		} else {
			return var2
		}
	}
	function apply_padding(timings) {
		timings["start"] -= PADDING
		timings["end"]   += PADDING
		if (timings["start"] < 0) {
			timings["start"] = 0
		}
	}
	BEGIN {
		prev["start"] = 0
		prev["end"]   = 0
	}
	$0 ~ SRT_TIMING_PATTERN {
		cur["start"] = str_time_to_seconds($1)
		cur["end"]   = str_time_to_seconds($2)

		if (cur["start"] == cur["end"] || (cur["end"] - cur["start"]) > 30) {
			next
		}

		apply_padding(cur)

		if (prev["start"] == 0 && prev["end"] == 0) {
			prev["start"] = cur["start"]
			prev["end"]   = cur["end"]
		} else {
			if (overlap(prev["start"], prev["end"], cur["start"], cur["end"]) > 0) {
				prev["start"] = min(prev["start"], cur["start"])
				prev["end"]   = max(prev["end"], cur["end"])
			} else {
				print prev["start"]","prev["end"]
				prev["start"] = cur["start"]
				prev["end"]   = cur["end"]
			}
		}
	}
	END {
		print prev["start"]","prev["end"]
	}'
}

filter_non_speech_fragments() {
	if [[ $use_skip_pattern != yes ]]; then
		cat -
		return
	fi

	awk -vSKIP_PATTERN="$skip_pattern" -vSRT_TIMING_PATTERN="$srt_timing_pattern" '
	$0 ~ SRT_TIMING_PATTERN {
		timings[timings_len++] = $0
		skip = 0
	}
	$0 ~ SKIP_PATTERN {
		if (skip == 0) {
			skip = 1
			--timings_len
		}
	}
	END {
		for (i = 0; i < timings_len; i++) {
			print timings[i]
		}
	}'
}

fetch_video_subtitles() {
	local -r video=${1:?}
	local -r subs_ext=${2:-}
	local -r subs_out=${3:?}

	if [[ $prefer_internal_subs == 'yes' ]]; then
		if [[ -f "$subs_out" ]] || extract_subtitles "$video" "$subs_out"; then
			echo "Extracted internal subtitles."
		else
			echo "Failed to extract internal subtitles."
			if [[ -f $subs_ext ]]; then
				echo "External subtitle file '$(basename -- "$subs_ext")' will be used."
				sub_conv "$subs_ext" "$subs_out"
			else
				return 1
			fi
		fi
	else
		if [[ -f $subs_ext ]]; then
			echo "External subtitle file '$(basename -- "$subs_ext")' will be used."
			sub_conv "$subs_ext" "$subs_out"
		else
			if [[ -f "$subs_out" ]] || extract_subtitles "$video" "$subs_out"; then
				echo "Extracted internal subtitles."
			else
				echo "Failed to extract internal subtitles."
				return 1
			fi
		fi
	fi
}

add_metadata() {
	local -r input=${1:?}
	local -r output=${2:?}

	ffmpeg -nostdin \
		-hide_banner \
		-loglevel error \
		-vn \
		-sn \
		"-${global_overwrite:-n}" \
		-i "$input" \
		-c copy \
		-metadata title="$(fetch_title "$input")" \
		-metadata artist="impd" \
		-metadata album="$(date '+%Y-%V')" \
		-metadata date="$(date '+%Y')" \
		-metadata track="$(fetch_episode_number "$input")" \
		"$output"
}

__make_condensed() {
	if ! check_output; then
		return 1
	fi

	if [[ ! -f $temp_audio ]] && ! extract_audio "$video" "$temp_audio"; then
		return 1
	fi

	if ! fetch_video_subtitles "$video" "$subs_ext" "$subs_out"; then
		echo "File '$(basename -- "$temp_audio")' will be added without condensing."
		add_metadata "$temp_audio" "$output"
		return
	fi

	local start end chunk_path
	while IFS=, read -r start end; do
		echo "Processing chunk from $start to $end..." >&3
		chunk_path=$chunks_dir/${base}_${start}-${end}.ogg
		make_chunk "$temp_audio" "$chunk_path" "$start" "$end"
		if [[ -f $chunk_path ]]; then echo "file '$chunk_path'"; fi
	done < <(filter_non_speech_fragments <"${subs_out:?}" | parse_speech_fragments) 3>&1 >"$chunks_file"

	ffmpeg -nostdin \
		-hide_banner \
		-loglevel error \
		-vn \
		-sn \
		-y \
		-f concat \
		-safe 0 \
		-i "$chunks_file" \
		-map_metadata -1 \
		-c copy \
		"$temp_audio"

	add_metadata "$temp_audio" "$output"
}

make_condensed() {
	local -r video=$(readlink -f "${1:?}")
	local -r base=$(basename -- "${video%.*}" | tr -d \')

	local -r job_dir=$(mktemp -d --tmpdir="$tmp_dir" -t "$base.job-XXXX")

	local -r temp_audio=$job_dir/$base.ogg
	local -r output=$(readlink -f "${2:-$immersionpod_dir/$current/$base.ogg}")

	local -r chunks_dir=$(mktemp -d --tmpdir="$job_dir" -t "chunks-XXXX")
	local -r chunks_file=$job_dir/chunks.list

	local -r subs_out=$job_dir/$base.srt
	local -r subs_ext=$(readlink -f "${3:-$(find_external_subtitles "$video")}")

	if __make_condensed; then
		local -r result=0
	fi
	rm -rf -- "$job_dir"
	return ${result-1}
}

condense() {
	if [[ -z $* ]]; then
		echo "Usage: condense -i [INPUT] -s [SUBTITLES] -o [OUTPUT]"
		return 1
	fi
	while getopts 'i:s:o:' flag; do
		case $flag in
		i)
			local -r input=${OPTARG}
			;;
		s)
			local -r subtitles=${OPTARG}
			prefer_internal_subs=no
			;;
		o)
			local -r output=${OPTARG}
			;;
		*)
			echo "Unknown argument." && exit 1
			;;
		esac
	done
	unset flag
	make_condensed "${input:?Input video file is not set.}" "${output-}" "${subtitles-}"
}

notify_send() {
	local -r msg=${*:?}
	echo "$msg"
	if command -v notify-send >/dev/null; then
		notify-send "Immersion pod" "$msg" &
	fi
}

add_audio() {
	local -r source_file=${1:?}

	if [[ -f $source_file ]]; then
		cp -- "$source_file" "$immersionpod_dir/$current/"
	elif [[ $source_file == http* ]]; then
		(cd -- "$immersionpod_dir/$current/" && curl "$source_file" -L -O)
	fi
}

add_video() {
	local -r source_file=$(readlink -f "${1:?}")

	if [[ -f $source_file ]]; then
		if [[ -z ${global_no_condense-} ]]; then
			make_condensed "$source_file"
		else
			make_uncondensed "$source_file"
		fi
	fi
}

add_notify() {
	local -r source_file=${1:?}

	case $source_file in
	http*youtu*be* | */watch?v=*)
		local -r func=add_yt
		;;
	*.mp3 | *.ogg | *.wav | *.m4a | *.wma)
		local -r func=add_audio
		;;
	*.mkv | *.mp4 | *.avi | *.flv | *.m4v)
		local -r func=add_video
		;;
	esac

	if [[ -z ${func-} ]]; then
		echo "Error: '$source_file' is not a supported file type." >&2
		return
	fi

	if "${func:?}" "$source_file"; then
		notify_send "$(basename -- "$source_file") has been added."
	fi
}

add() {
	case ${1-} in
	-r | --recent | recent)
		add_recent
		return
		;;
	-s | --stdin | stdin)
		add_stdin
		return
		;;
	"")
		echo "You haven't told me what to add."
		return
		;;
	esac
	for arg; do
		add_notify "$arg"
	done
	unset arg
}

add_stdin() {
	if [[ -n ${1-} ]]; then
		local -r sep=$'\0'
	else
		local -r sep=$'\n'
	fi
	while IFS= read -r -d "$sep" video; do
		if grep -Pq "$filename_pattern" <<<"$video"; then
			add_notify "$video"
		fi
	done
}

add_recent() {
	find_recent_videos -0 | add_stdin -0
}

add_yt() {
	local -r _ytdl=$(command -v yt-dlp || command -v youtube-dl)

	if [[ -z $_ytdl ]]; then
		echo "Error: 'youtube-dl' or 'yt-dlp' is not installed." >&2
		return 1
	fi

	"$_ytdl" \
		--ignore-errors \
		--extract-audio \
		--add-metadata \
		--continue \
		--no-mtime \
		-f bestaudio/best \
		-o "$immersionpod_dir/$current/%(uploader)s%(title)s.%(ext)s" \
		"${*:?}"
}

archive() {
	local -r archive_fol="$immersionpod_dir/$archive/$(date '+%Y-%V')"
	local -a old_episodes=()

	echo "Archiving old episodes..."

	while IFS= read -r -d $'\0' filename; do
		old_episodes+=("$filename")
	done < <(find_outdated_audio)

	# if there are old episodes, crate a dir for them and then move them
	if [[ ${#old_episodes[@]} -gt 0 ]]; then
		mkdir -pv -- "$archive_fol"
		mv -v -- "${old_episodes[@]}" "$archive_fol"
		notify_send "Archived ${#old_episodes[@]} episodes."
	else
		notify_send "Nothing to archive."
	fi
}

rotate() {
	add_recent
	archive
	reshuffle
}

reshuffle() {
	if ! command -v mpc >/dev/null; then
		echo "Error: mpc is not installed." >&2
		return 1
	fi
	if ! pgrep -x mpd >/dev/null; then
		echo "Error: mpd is not running." >&2
		return 1
	fi
	mpc update "$program/$current"
	mpc crop || true
	mpc add "$program/$current"
	mpc shuffle
	mpc play
}

get_mpd_dir() {
	# https://wiki.archlinux.org/index.php/Music_Player_Daemon#Configuration
	local -r path=~/.config/mpd/mpd.conf
	# shellcheck disable=SC2088
	{
		echo '~/music'
		if [[ -d $music_dir ]]; then
			echo "$music_dir"
		else
			sed -n '/^music_directory/ {s/^music_directory[[:space:]]*"\([^"]*\)".*$/\1/p; q}' "$path" 2>/dev/null
		fi
	} | tail -1
}

set_impd_dir() {
	local dir
	dir=$(get_mpd_dir)/$program
	dir=${dir//\/\//\/}
	dir=${dir/\~/$HOME}
	readonly immersionpod_dir=$dir
}

echo_help() {
	local -r bn=$(basename -- "$0")
	cat <<-EOF
		Usage: $bn ACTION [OPTION] FILE
		Manage immersion audio.

		ACTION Commands:
		  add [OPTION] FILE	Add files to Immersion pod.
		    Options:
		      -r, --recent	Add new files from your video directory to Immersion pod.
		      -s, --stdin	Read filenames from stdin.
		  condense [OPTION]	Condense a video.
		    Options:
		      -i		Input file.
		      -o		Output file.
		      -s		Subtitle file.
		  archive		Move episodes older than $recent_threshold days to the archive folder.
		  reshuffle		Re-add files to the playlist, shuffle them and start playing.
		  rotate		Short for add_recent, archive, reshuffle.
		  probe [a|s] FILE	Print streams in FILE.

		Options:
		  -f, --force		Overwrite existing files.
		  -n, --no-condense	Don't condense audio.

		Examples:
		  $bn add -f 'video.mkv'
		  $bn rotate
		  find /mnt/videos/ | $bn add --stdin

		To report bugs, see https://matrix.to/#/#djtspace:g33k.se
	EOF
}

version() {
	cat <<-EOF
		$(basename -- "$0") $version
		Copyright (C) 2021 Ren Tatsumoto.
		License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
		This is free software: you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.
	EOF
}

main() {
	# Load default configuration, then override settings with the config file
	load_default_config
	# shellcheck source=/dev/null
	if [[ -f ${config_filepath:?} ]]; then
		source "$config_filepath"
	fi

	set_impd_dir
	ensure_dirs

	# Process global arguments
	local args=()
	for arg; do
		case $arg in
		-n | --no-condense) readonly global_no_condense='y' ;;
		-f | --force) readonly global_overwrite='y' ;;
		*) args+=("$arg") ;;
		esac
	done
	unset arg

	case ${1-} in
	'' | -h | --help) echo_help ;;
	-v | --version) version ;;
	*)
		local -r command=${args[0]}

		if declare -f -- "$command" >/dev/null && [[ $command != "${FUNCNAME[0]}" ]]; then
			# call arguments verbatim
			"${args[@]}"
		else
			echo "Error: '$1' is not a known function name." >&2
			echo_help
			exit 1
		fi
		;;
	esac
}

#
# MAIN
# Do not change anything here. If you want to modify the code, edit main()
#
main "$@"
